import numpy as np


class NeuralNetwork(object):
    def __init__(self, input_nodes, hidden_nodes, output_nodes, learning_rate):
        # Set number of nodes in input, hidden and output layers.
        self.input_nodes = input_nodes
        self.hidden_nodes = hidden_nodes
        self.output_nodes = output_nodes

        # Initialize weights
        self.weights_input_to_hidden = np.random.normal(0.0, self.input_nodes**-0.5, 
                                       (self.input_nodes, self.hidden_nodes))

        self.weights_hidden_to_output = np.random.normal(0.0, self.hidden_nodes**-0.5, 
                                       (self.hidden_nodes, self.output_nodes))
        self.lr = learning_rate
        
        #### TODO: Set self.activation_function to your implemented sigmoid function ####
        #
        # Note: in Python, you can define a function with a lambda expression,
        # as shown below.
        self.activation_function = lambda x : ( 1/(1 + np.exp(-x)) )   #! of hidden nodes       Replace 0 with your sigmoid calculation.
        self.sigmoid_prime = lambda x : (x * (1 - x))                  #! of hidden nodes
        
        ### If the lambda code above is not something you're familiar with,
        # You can uncomment out the following three lines and put your 
        # implementation there instead.
        #
        #def sigmoid(x):
        #    return 0  # Replace 0 with your sigmoid calculation here
        #self.activation_function = sigmoid
                    

    def train(self, features, targets):
        ''' Train the network on batch of features and targets. 
        
            Arguments
            ---------
            
            features: 2D array, each row is one data record, each column is a feature
            targets: 1D array of target values
        
        '''
        n_records = features.shape[0]
        delta_weights_i_h = np.zeros(self.weights_input_to_hidden.shape)   #! inputs x hidden
        delta_weights_h_o = np.zeros(self.weights_hidden_to_output.shape)  #! hidden x outputs

        #print ("shape delta_weights_i_h", np.shape(delta_weights_i_h))
        #print ("shape delta_weights_h_o", np.shape(delta_weights_h_o))
        #print ("shape features", np.shape(features))
        
        for X, y in zip(features, targets):            
            #print ("shape X", np.shape(X), "shape y", np.shape(y), "shape weights_inp_to_hid", np.shape(self.weights_input_to_hidden), \
#"shape weights_hid_to_out", np.shape(self.weights_hidden_to_output),  "iter=", iterations, "learning_rate=", learning_rate, "hidden_nodes=", hidden_nodes, "output_nodes=", output_nodes)

            
            final_outputs, hidden_outputs = self.forward_pass_train(X)  # Implement the forward pass function below
            # Implement the backproagation function below
            delta_weights_i_h, delta_weights_h_o = self.backpropagation(final_outputs, hidden_outputs, X, y, 
                                                                        delta_weights_i_h, delta_weights_h_o)
        self.update_weights(delta_weights_i_h, delta_weights_h_o, n_records)


    def forward_pass_train(self, X):
        ''' Implement forward pass here 
         
            Arguments
            ---------
            X: features batch

        '''
        #### Implement the forward pass here ####
        ### Forward pass ###
        # TODO: Hidden layer - Replace these values with your calculations.
        hidden_inputs = np.dot(X, self.weights_input_to_hidden) # signals into hidden layer
        #print ("shape hidden_inputs", np.shape(hidden_inputs))
        hidden_outputs = self.activation_function(hidden_inputs) # signals from hidden layer
        #print ("shape hidden_outputs", np.shape(hidden_outputs))
        

        # TODO: Output layer - Replace these values with your calculations.
        final_inputs = np.dot(hidden_outputs, self.weights_hidden_to_output) # signals into final output layer
        #print ("shape final_inputs", np.shape(final_inputs))
        final_outputs = final_inputs # Note: output layer activation function is y=x # no good -> self.activation_function(final_inputs) # signals from final output layer
        #print ("shape final_outputs", np.shape(final_outputs))
        
        return final_outputs, hidden_outputs

    def backpropagation(self, final_outputs, hidden_outputs, X, y, delta_weights_i_h, delta_weights_h_o):
        ''' Implement backpropagation
         
            Arguments
            ---------
            final_outputs: output from forward pass
            y: target (i.e. label) batch
            delta_weights_i_h: change in weights from input to hidden layers
            delta_weights_h_o: change in weights from hidden to output layers

        '''
        #### Implement the backward pass here ####
        ### Backward pass ###

        # TODO: Output error - Replace this value with your calculations.
        error = y - final_outputs # Output layer error is the difference between desired target and actual output.
        #print ("shape y", np.shape(y), "shape final_outputs", np.shape(final_outputs), "shape error", np.shape(error))
        
        #! ########## Sigmoid prime calcs  ###############
        # sigmoid prime of output is:  final_outputs * (1 - final_outputs)  CORRECT!
        # sigmoid prime of hidden layer is: ???? hidden_outputs * (1 - hidden_outputs)
        
        #output_error_term = error * final_outputs * (1 - final_outputs)  # I moved this up from below!!  RIGHT!!!
        output_error_term = error # sigmoid_prime of output is 1 -  * self.sigmoid_prime(final_outputs)
        #print ("shape output_error_term", np.shape(output_error_term))
        #print ("output_error_term", output_error_term)
        
        # TODO: Calculate the hidden layer's contribution to the error
        # BELOW: !! This does not work!! (shapes bad) from backprop lesson!!! W * error output * sigmoid_prime
        # hidden_error = np.dot(output_error_term, self.weights_hidden_to_output) 

        #print ("hidden_error", np.shape(hidden_error))
        
        # TODO: Backpropagated error terms - Replace these values with your calculations.
        #output_error_term = None
        #print ("self.weights_hidden_to_output" , self.weights_hidden_to_output)
        #print ("hidden outputs" , hidden_outputs)
        #print ("hidden_error_term eqtn: weights_hidden_to_output * output_error_term * hidden_outputs * (1-hidden_outputs)")
        
        #! Below is CORRECT!
        hidden_error_term = np.dot(output_error_term, np.reshape(self.weights_hidden_to_output, (self.output_nodes, self.hidden_nodes)) ) * self.sigmoid_prime(hidden_outputs)
        #print ("hidden_error_term_1", hidden_error_term_1)
        #! Below is wrong shape!!
        #hidden_error_term = np.reshape(self.weights_hidden_to_output, (1,2))  * output_error_term * hidden_outputs * (1 - hidden_outputs)  # 2x1 * scalar * (2,)
        # WORKS!! ON OUTPUT=1  hidden_error_term = np.reshape(self.weights_hidden_to_output, (self.output_nodes, self.hidden_nodes))  * output_error_term * self.sigmoid_prime(hidden_outputs)
        #print ("shape h_e_t", np.shape(hidden_error_term))
        #print ("hidden_error_term", np.shape(hidden_error_term))
        #print ("hidden_error_term", hidden_error_term)
                
        # Weight step (input to hidden)
        #print("shape X[:, None]", np.shape(X[:, None]))
        delta_weights_i_h += hidden_error_term * X[:, None]
        #print("delta_weights_i_h", np.shape(delta_weights_i_h))
        
        # Weight step (hidden to output)
        #print("shape output_error_term", np.shape(output_error_term), "shape hidden_outputs", np.shape(hidden_outputs))
        #print("delta_weights_h_o", np.shape(delta_weights_h_o))
        #print ("shape output_error_term * hidden_outputs", np.shape(output_error_term * hidden_outputs))
        # works w/test: delta_weights_h_o += self.lr * np.reshape(output_error_term * hidden_outputs, (2, 1))
        output_error_dot_hidden_outputs = np.dot(np.reshape(output_error_term, (self.output_nodes, 1)), np.reshape(hidden_outputs, ( 1, self.hidden_nodes)))
        #TEST =np.reshape(output_error_term, (self.output_nodes, 1)) * np.reshape(hidden_outputs, (self.hidden_nodes, 1))
        #print ("shape TEST", np.shape(TEST))
        #delta_weights_h_o += self.lr * np.dot(np.reshape(output_error_term * hidden_outputs, (self.hidden_nodes, self.output_nodes))
        # BELOW WORKS W/OUTPUT=1
        delta_weights_h_o += np.reshape(output_error_dot_hidden_outputs, (self.hidden_nodes, self.output_nodes))
        #print("delta_weights_h_o", np.shape(delta_weights_h_o))
        #print("delta_weights_h_o", delta_weights_h_o)
        return delta_weights_i_h, delta_weights_h_o

    def update_weights(self, delta_weights_i_h, delta_weights_h_o, n_records):
        ''' Update weights on gradient descent step
         
            Arguments
            ---------
            delta_weights_i_h: change in weights from input to hidden layers
            delta_weights_h_o: change in weights from hidden to output layers
            n_records: number of records

        '''
        self.weights_hidden_to_output += self.lr *  delta_weights_h_o / n_records # update hidden-to-output weights with gradient descent step
        self.weights_input_to_hidden += self.lr * delta_weights_i_h / n_records  # update input-to-hidden weights with gradient descent step

    def run(self, features):
        ''' Run a forward pass through the network with input features 
        
            Arguments
            ---------
            features: 1D array of feature values
        '''
        
        #### Implement the forward pass here ####
        # TODO: Hidden layer - replace these values with the appropriate calculations.
        hidden_inputs = np.dot(features, self.weights_input_to_hidden) # signals into hidden layer
        hidden_outputs = self.activation_function(hidden_inputs) # signals from hidden layer
        
        # TODO: Output layer - Replace these values with the appropriate calculations.
        final_inputs = np.dot(hidden_outputs, self.weights_hidden_to_output) # signals into final output layer
        final_outputs = final_inputs # signals from final output layer 
        
        return final_outputs


#########################################################
# Set your hyperparameters here
##########################################################
iterations = 2500
learning_rate = 1.0
hidden_nodes = 10
output_nodes = 1
